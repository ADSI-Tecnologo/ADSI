CREATE TABLE  "ARTICULO" 
   (	"ID_ART" NUMBER NOT NULL ENABLE, 
	"TIT_ART" VARCHAR2(100) NOT NULL ENABLE, 
	"AUT_ART" VARCHAR2(100) NOT NULL ENABLE, 
	"EDI_ART" VARCHAR2(300) NOT NULL ENABLE, 
	"PREC_ART" NUMBER, 
	 CONSTRAINT "ARTICULO_PK" PRIMARY KEY ("ID_ART") ENABLE
   ) ;CREATE TABLE  "ARTICULOSELIMINADOS" 
   (	"ID_REGISTRO" NUMBER, 
	"ID_ART_BORRADO" NUMBER, 
	"TIT_ART_BORRADO" VARCHAR2(100), 
	"AUT_ART_BORRADO" VARCHAR2(100), 
	"EDI_ART_BORRADO" VARCHAR2(300), 
	"PREC_ART_BORRADO" NUMBER, 
	"FECHABORRADO" TIMESTAMP (6), 
	"USUARIO" VARCHAR2(45), 
	"ACCION" VARCHAR2(40), 
	 CONSTRAINT "ARTICULOSELIMINADOS_PK" PRIMARY KEY ("ID_REGISTRO") ENABLE
   ) ;CREATE TABLE  "PEDIDO" 
   (	"ID_PED" NUMBER NOT NULL ENABLE, 
	"ID_CLI_PED" VARCHAR2(11) NOT NULL ENABLE, 
	"FEC_PED" DATE NOT NULL ENABLE, 
	"VAL_PED" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "PEDIDO_PK" PRIMARY KEY ("ID_PED") ENABLE
   ) ;CREATE TABLE  "ARTICULOXPEDIDO" 
   (	"ID_PED_ARTPED" NUMBER, 
	"ID_ART_ARTPED" NUMBER, 
	"CAN_ART_ARTPED" NUMBER NOT NULL ENABLE, 
	"VAL_VEN_ART_ARTPED" NUMBER NOT NULL ENABLE
   ) ;CREATE TABLE  "CLIENTE" 
   (	"ID_CLI" VARCHAR2(11) NOT NULL ENABLE, 
	"NOM_CLI" VARCHAR2(30) NOT NULL ENABLE, 
	"APE_CLI" VARCHAR2(30) NOT NULL ENABLE, 
	"DIR_CLI" VARCHAR2(100) NOT NULL ENABLE, 
	"MES_CUM_CLI" VARCHAR2(10), 
	"DEP_CLI" VARCHAR2(20), 
	 CONSTRAINT "CLIENTE_PRIMARYKEY" PRIMARY KEY ("ID_CLI") ENABLE
   ) ;CREATE TABLE  "REGISTROARTICULOS" 
   (	"ID_REGISTRO" NUMBER, 
	"ID_ART_ANTIGUO" NUMBER, 
	"TIT_ART_ANTIGUO" VARCHAR2(100), 
	"AUT_ART_ANTIGUO" VARCHAR2(100), 
	"EDI_ART_ANTIGUO" VARCHAR2(300), 
	"PREC_ART_ANTIGUO" NUMBER, 
	"ID_ART_NUEVO" NUMBER, 
	"TIT_ART_NUEVO" VARCHAR2(100), 
	"AUT_ART_NUEVO" VARCHAR2(100), 
	"EDI_ART_NUEVO" VARCHAR2(300), 
	"PREC_ART_NUEVO" NUMBER, 
	"FECHAMODIFICACIONREGISTRO" TIMESTAMP (6), 
	"USUARIO" VARCHAR2(45), 
	"ACCION" VARCHAR2(40), 
	 CONSTRAINT "REGISTROARTICULOS_PK" PRIMARY KEY ("ID_REGISTRO") ENABLE
   ) ;CREATE TABLE  "REGISTROPEDIDOS" 
   (	"ID_REGISTRO" NUMBER, 
	"ID_PED_ANTIGUO" NUMBER, 
	"ID_CLI_PED_ANTIGUO" VARCHAR2(11), 
	"FEC_PED_ANTIGUO" DATE, 
	"VAL_PED_ANTIGUO" NUMBER, 
	"ID_PED_NUEVO" NUMBER, 
	"ID_CLI_PED_NUEVO" VARCHAR2(11), 
	"FEC_PED_NUEVO" DATE, 
	"VAL_PED_NUEVO" NUMBER, 
	"FECHAMODIFICACION" TIMESTAMP (6), 
	"USUARIO" VARCHAR2(45), 
	"ACCION" VARCHAR2(40), 
	 CONSTRAINT "REGISTROPEDIDOS_PK" PRIMARY KEY ("ID_REGISTRO") ENABLE
   ) ;CREATE TABLE  "REGISTROPEDIDOSELIMINADOS" 
   (	"ID_REGISTRO" NUMBER, 
	"ID_PED_BORRADO" NUMBER, 
	"ID_CLI_PED_BORRADO" VARCHAR2(11), 
	"FEC_PED_BORRADO" DATE, 
	"VAL_PED_BORRADO" NUMBER, 
	"FECHABORRADO" TIMESTAMP (6), 
	"USUARIO" VARCHAR2(45), 
	"ACCION" VARCHAR2(40), 
	 CONSTRAINT "REGISTROPEDIDOSELIMINADOS_PK" PRIMARY KEY ("ID_REGISTRO") ENABLE
   ) ;ALTER TABLE  "ARTICULOXPEDIDO" ADD CONSTRAINT "ARTICULOXPEDIDO_FK" FOREIGN KEY ("ID_PED_ARTPED")
	  REFERENCES  "PEDIDO" ("ID_PED") DISABLE;ALTER TABLE  "ARTICULOXPEDIDO" ADD CONSTRAINT "ARTICULOXPEDIDO_FK2" FOREIGN KEY ("ID_ART_ARTPED")
	  REFERENCES  "ARTICULO" ("ID_ART") DISABLE;ALTER TABLE  "PEDIDO" ADD CONSTRAINT "PEDIDO_FK" FOREIGN KEY ("ID_CLI_PED")
	  REFERENCES  "CLIENTE" ("ID_CLI") ENABLE;
CREATE OR REPLACE FUNCTION  "CUSTOM_AUTH" (p_username in VARCHAR2, p_password in VARCHAR2)
return BOOLEAN
is
  l_password varchar2(4000);
  l_stored_password varchar2(4000);
  l_expires_on date;
  l_count number;
begin
-- First, check to see if the user is in the user table
select count(*) into l_count from demo_users where user_name = p_username;
if l_count > 0 then
  -- First, we fetch the stored hashed password & expire date
  select password, expires_on into l_stored_password, l_expires_on
   from demo_users where user_name = p_username;

  -- Next, we check to see if the user's account is expired
  -- If it is, return FALSE
  if l_expires_on > sysdate or l_expires_on is null then

    -- If the account is not expired, we have to apply the custom hash
    -- function to the password
    l_password := custom_hash(p_username, p_password);

    -- Finally, we compare them to see if they are the same and return
    -- either TRUE or FALSE
    if l_password = l_stored_password then
      return true;
    else
      return false;
    end if;
  else
    return false;
  end if;
else
  -- The username provided is not in the DEMO_USERS table
  return false;
end if;
end;
/
/
CREATE OR REPLACE FUNCTION  "CUSTOM_HASH" (p_username in varchar2, p_password in varchar2)
return varchar2
is
  l_password varchar2(4000);
  l_salt varchar2(4000) := '5Z6I5AGHR3S80RBS6SWLOJ1EX7LDO9';
begin

-- This function should be wrapped, as the hash algorhythm is exposed here.
-- You can change the value of l_salt or the method of which to call the
-- DBMS_OBFUSCATOIN toolkit, but you much reset all of your passwords
-- if you choose to do this.

l_password := utl_raw.cast_to_raw(dbms_obfuscation_toolkit.md5
  (input_string => p_password || substr(l_salt,10,13) || p_username ||
    substr(l_salt, 4,10)));
return l_password;
end;
/
/
CREATE OR REPLACE FUNCTION  "EDITORIALES" 
RETURN NUMBER
IS cantidad NUMBER;
BEGIN
SELECT COUNT(EDI_ART) INTO cantidad 
FROM ARTICULO;
RETURN cantidad;
END;
/
/
CREATE OR REPLACE FUNCTION  "PEDIDOSUPERIOR" 
RETURN VARCHAR2 
IS
informe varchar2(150);
BEGIN
select (NOM_CLI||' '||FEC_PED||' '||VAL_PED) into informe
FROM PEDIDO
INNER JOIN CLIENTE ON CLIENTE.ID_CLI = PEDIDO.ID_CLI_PED
WHERE VAL_PED = (SELECT MAX(VAL_PED) FROM PEDIDO);
RETURN INFORME;
END;
/
/
CREATE UNIQUE INDEX  "CLIENTE_PRIMARYKEY" ON  "CLIENTE" ("ID_CLI") 
  ;CREATE UNIQUE INDEX  "ARTICULO_PK" ON  "ARTICULO" ("ID_ART") 
  ;CREATE UNIQUE INDEX  "PEDIDO_PK" ON  "PEDIDO" ("ID_PED") 
  ;CREATE UNIQUE INDEX  "REGISTROARTICULOS_PK" ON  "REGISTROARTICULOS" ("ID_REGISTRO") 
  ;CREATE UNIQUE INDEX  "ARTICULOSELIMINADOS_PK" ON  "ARTICULOSELIMINADOS" ("ID_REGISTRO") 
  ;CREATE UNIQUE INDEX  "REGISTROPEDIDOS_PK" ON  "REGISTROPEDIDOS" ("ID_REGISTRO") 
  ;CREATE UNIQUE INDEX  "REGISTROPEDIDOSELIMINADOS_PK" ON  "REGISTROPEDIDOSELIMINADOS" ("ID_REGISTRO") 
  ;
Rem No package found to generate DDL.
CREATE OR REPLACE PROCEDURE  "ARTICULOSXEDITORIAL" 
IS
CURSOR CANTIDAD IS
SELECT EDI_ART, COUNT(EDI_ART) AS "NUMERO"
FROM ARTICULO
GROUP BY EDI_ART;
BEGIN
    DBMS_OUTPUT.PUT_LINE('EDITORIAL      CANTIDAD ARTICULOS');
    DBMS_OUTPUT.PUT_LINE('------------------------------');
FOR C IN CANTIDAD LOOP
    DBMS_OUTPUT.PUT_LINE(C.EDI_ART||'         '||C.NUMERO);
END LOOP;
END ARTICULOSXEDITORIAL;
/
/
CREATE OR REPLACE PROCEDURE  "CLIENTESORDENADOS" 
IS
CURSOR LISTA IS
SELECT ID_CLI, NOM_CLI, APE_CLI, DIR_CLI, DEP_CLI, MES_CUM_CLI
FROM CLIENTE 
ORDER BY APE_CLI, NOM_CLI;
BEGIN 
      DBMS_OUTPUT.PUT_LINE('ID     NOMBRE       APELLIDO   DIRECCIÓN                DEPARTAMENTO         MES CUMPLEAÑOS');
      DBMS_OUTPUT.PUT_LINE('---------------------------------------------------------------------------------------------------------');      
FOR C IN LISTA LOOP
      DBMS_OUTPUT.PUT_LINE(C.ID_CLI||'     '||C.NOM_CLI||'         '||C.APE_CLI||'        '||C.DIR_CLI||'            '||C.DEP_CLI||'      '||C.MES_CUM_CLI);
END LOOP;
END CLIENTESORDENADOS;
/
/
CREATE OR REPLACE PROCEDURE  "CLIENTESXFECHA" (fec DATE)
IS
CURSOR DATOS IS 
SELECT CLIENTE.NOM_CLI, CLIENTE.DIR_CLI
FROM CLIENTE INNER JOIN PEDIDO
ON CLIENTE.ID_CLI = PEDIDO.ID_CLI_PED
WHERE PEDIDO.FEC_PED= fec;
BEGIN
     DBMS_OUTPUT.PUT_LINE('NOMBRE            DIRECCIÓN');
     DBMS_OUTPUT.PUT_LINE('---------------------------');
FOR C IN DATOS LOOP
DBMS_OUTPUT.PUT_LINE(C.NOM_CLI||'           '||C.DIR_CLI);
END LOOP;
END CLIENTESXFECHA;
/
/
CREATE OR REPLACE PROCEDURE  "INSERTARTICULOS" (ID IN NUMBER, TITULO IN VARCHAR2, AUTOR IN VARCHAR2,
EDITOR IN VARCHAR2, PRECIO IN NUMBER)
IS
BEGIN
INSERT INTO ARTICULO(ID_ART, TIT_ART, AUT_ART, EDI_ART, PREC_ART)
VALUES
(ID, TITULO, AUTOR, EDITOR, PRECIO);
END INSERTARTICULOS;
/
/
CREATE OR REPLACE PROCEDURE  "INSERTARTICULOXPEDIDO" (IDPEDIDO IN NUMBER, IDARTICULO IN NUMBER, CANTIDAD IN NUMBER, 
VALOR IN NUMBER)
IS
BEGIN 
INSERT INTO ARTICULOXPEDIDO (ID_PED_ARTPED, ID_ART_ARTPED, CAN_ART_ARTPED, VAL_VEN_ART_ARTPED)
VALUES
(IDPEDIDO, IDARTICULO, CANTIDAD, VALOR);
END INSERTARTICULOXPEDIDO;
/
/
CREATE OR REPLACE PROCEDURE  "INSERTCLIENTES" (ID IN VARCHAR2, NOMBRE IN VARCHAR2, 
APELLIDO IN VARCHAR2, DIRECCION IN VARCHAR2, DEPARTAMENTO IN VARCHAR2, CUMPLEAÑOS IN VARCHAR2)
IS
BEGIN
INSERT INTO CLIENTE(ID_CLI,  NOM_CLI,  APE_CLI,  DIR_CLI, DEP_CLI, MES_CUM_CLI)
VALUES
(ID, NOMBRE, APELLIDO, DIRECCION, DEPARTAMENTO, CUMPLEAÑOS);
END INSERTCLIENTES;
/
/
CREATE OR REPLACE PROCEDURE  "INSERTPEDIDO" (ID IN NUMBER, IDCLIENTE IN VARCHAR2, FECHA IN DATE, VALOR IN NUMBER)
IS
BEGIN
INSERT INTO PEDIDO(ID_PED, ID_CLI_PED, FEC_PED, VAL_PED)
VALUES
(ID, IDCLIENTE, FECHA, VALOR);
END INSERTPEDIDO;
/
/
CREATE OR REPLACE PROCEDURE  "LISTAPEDIDOS" 
IS
CURSOR LISTA IS
SELECT PEDIDO.ID_PED, PEDIDO.ID_CLI_PED, PEDIDO.FEC_PED, PEDIDO.VAL_PED, ARTICULO.TIT_ART
FROM PEDIDO INNER JOIN ARTICULOXPEDIDO
ON ARTICULOXPEDIDO.ID_PED_ARTPED = PEDIDO.ID_PED
INNER JOIN ARTICULO
ON ARTICULO.ID_ART = ARTICULOXPEDIDO.ID_ART_ARTPED;
BEGIN
  DBMS_OUTPUT.PUT_LINE('ID PEDIDO     ID CLIENTE     FECHA PEDIDO    VALOR PEDIDO    NOMBRE ARTICULO');
  DBMS_OUTPUT.PUT_LINE('-----------------------------------------------------------------------------');
FOR C IN LISTA LOOP
 DBMS_OUTPUT.PUT_LINE(C.ID_PED||'         '||C.ID_CLI_PED||'          '||C.FEC_PED||'       '||C.VAL_PED||'          '||C.TIT_ART);
END LOOP;
END LISTAPEDIDOS;
/
/
CREATE OR REPLACE PROCEDURE  "PEDIDOMAYOR" 
IS
CURSOR DATOS IS
SELECT CLIENTE.NOM_CLI, CLIENTE.APE_CLI, PEDIDO.VAL_PED
FROM CLIENTE INNER JOIN PEDIDO 
ON PEDIDO.ID_CLI_PED = CLIENTE.ID_CLI
WHERE PEDIDO.VAL_PED = (SELECT MAX(VAL_PED) FROM PEDIDO);
BEGIN
   DBMS_OUTPUT.PUT_LINE('NOMBRE         APELLIDO         VALOR PEDIDO');
   DBMS_OUTPUT.PUT_LINE('-----------------------------------------------');
FOR C IN DATOS LOOP
   DBMS_OUTPUT.PUT_LINE(C.NOM_CLI||'        '||C.APE_CLI||'             '||C.VAL_PED);
END LOOP;
END PEDIDOMAYOR;
/
/
CREATE OR REPLACE PROCEDURE  "PEDIDOSXARTICULOS" 
IS
CURSOR DATOS IS
SELECT PEDIDO.ID_PED, PEDIDO.ID_CLI_PED, PEDIDO.FEC_PED, PEDIDO.VAL_PED, ARTICULO.ID_ART,
ARTICULO.TIT_ART, ARTICULO.PREC_ART, ARTICULOXPEDIDO.CAN_ART_ARTPED
FROM PEDIDO INNER JOIN ARTICULOXPEDIDO
ON PEDIDO.ID_PED = ARTICULOXPEDIDO.ID_PED_ARTPED
INNER JOIN ARTICULO
ON ARTICULO.ID_ART= ARTICULOXPEDIDO.ID_ART_ARTPED;
BEGIN 
  DBMS_OUTPUT.PUT_LINE('ID PEDIDO     ID CLIENTE   FECHA PEDIDO        VALOR PEDIDO   ID ARTICULO       NOMBRE ARTICULO                       PRECIO ARTICULO    CANTIDAD ARTICULO');
  DBMS_OUTPUT.PUT_LINE('-------------------------------------------------------------------------------------------------------------------------------------------------------------');
FOR C IN DATOS LOOP  
  DBMS_OUTPUT.PUT_LINE(C.ID_PED||'              '||C.ID_CLI_PED||'         '||C.FEC_PED||'          '||C.VAL_PED||'           '||C.ID_ART||'            '||C.TIT_ART||'         '||C.PREC_ART||'          '||C.CAN_ART_ARTPED);
END LOOP;
END PEDIDOSXARTICULOS;
/
/
 CREATE SEQUENCE   "ARTICULOSELIMINADOS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "ARTICULO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_CUST_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_ORDER_ITEMS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_ORD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_PROD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "DEMO_USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "PEDIDO_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "REGISTROARTICULOS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "REGISTROPEDIDOSELIMINADOS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ; CREATE SEQUENCE   "REGISTROPEDIDOS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
Rem No synonym found to generate DDL.
CREATE OR REPLACE TRIGGER  "ARTICULOSELIMINADOS" 
BEFORE 
delete on "ARTICULO"
for each row
begin
INSERT INTO ARTICULOSELIMINADOS(ID_ART_BORRADO, TIT_ART_BORRADO, AUT_ART_BORRADO, EDI_ART_BORRADO,
PREC_ART_BORRADO, FECHABORRADO, USUARIO, ACCION)
VALUES
(:OLD.ID_ART, :OLD.TIT_ART, :OLD.AUT_ART, :OLD.EDI_ART, :OLD.PREC_ART, SYSDATE, USER, 'Borrar');
end;
/
ALTER TRIGGER  "ARTICULOSELIMINADOS" ENABLE;CREATE OR REPLACE TRIGGER  "BI_ARTICULO" 
  before insert on "ARTICULO"               
  for each row  
begin   
  if :NEW."ID_ART" is null then 
    select "ARTICULO_SEQ".nextval into :NEW."ID_ART" from dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_ARTICULO" ENABLE;CREATE OR REPLACE TRIGGER  "BI_ARTICULOSELIMINADOS" 
  before insert on "ARTICULOSELIMINADOS"               
  for each row  
begin   
  if :NEW."ID_REGISTRO" is null then 
    select "ARTICULOSELIMINADOS_SEQ".nextval into :NEW."ID_REGISTRO" from dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_ARTICULOSELIMINADOS" ENABLE;CREATE OR REPLACE TRIGGER  "BI_PEDIDO" 
  before insert on "PEDIDO"               
  for each row  
begin   
  if :NEW."ID_PED" is null then 
    select "PEDIDO_SEQ".nextval into :NEW."ID_PED" from dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_PEDIDO" ENABLE;CREATE OR REPLACE TRIGGER  "BI_REGISTROARTICULOS" 
  before insert on "REGISTROARTICULOS"               
  for each row  
begin   
  if :NEW."ID_REGISTRO" is null then 
    select "REGISTROARTICULOS_SEQ".nextval into :NEW."ID_REGISTRO" from dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_REGISTROARTICULOS" ENABLE;CREATE OR REPLACE TRIGGER  "BI_REGISTROPEDIDOS" 
  before insert on "REGISTROPEDIDOS"               
  for each row  
begin   
  if :NEW."ID_REGISTRO" is null then 
    select "REGISTROPEDIDOS_SEQ".nextval into :NEW."ID_REGISTRO" from dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_REGISTROPEDIDOS" ENABLE;CREATE OR REPLACE TRIGGER  "BI_REGISTROPEDIDOSELIMINADOS" 
  before insert on "REGISTROPEDIDOSELIMINADOS"               
  for each row  
begin   
  if :NEW."ID_REGISTRO" is null then 
    select "REGISTROPEDIDOSELIMINADOS_SEQ".nextval into :NEW."ID_REGISTRO" from dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_REGISTROPEDIDOSELIMINADOS" ENABLE;CREATE OR REPLACE TRIGGER  "PEDIDOSELIMINADOS" 
before
delete on "PEDIDO"
for each row
begin
INSERT INTO REGISTROPEDIDOSELIMINADOS(ID_PED_BORRADO, ID_CLI_PED_BORRADO, FEC_PED_BORRADO, VAL_PED_BORRADO, 
FECHABORRADO, USUARIO, ACCION)
VALUES
(:OLD.ID_PED, :OLD.ID_CLI_PED, :OLD.FEC_PED, :OLD.VAL_PED, SYSDATE, USER, 'Borrar');
end;
/
ALTER TRIGGER  "PEDIDOSELIMINADOS" ENABLE;CREATE OR REPLACE TRIGGER  "REGISTROARTICULOS" 
BEFORE
update on "ARTICULO"
for each row
begin
INSERT INTO REGISTROARTICULOS (ID_ART_ANTIGUO, TIT_ART_ANTIGUO, AUT_ART_ANTIGUO, EDI_ART_ANTIGUO,
PREC_ART_ANTIGUO, ID_ART_NUEVO, TIT_ART_NUEVO, AUT_ART_NUEVO, EDI_ART_NUEVO, PREC_ART_NUEVO,
FECHAMODIFICACIONREGISTRO, USUARIO, ACCION)
VALUES
(:OLD.ID_ART, :OLD.TIT_ART, :OLD.AUT_ART, :OLD.EDI_ART, :OLD.PREC_ART, :NEW.ID_ART, :NEW.TIT_ART, 
:NEW.AUT_ART, :NEW.EDI_ART, :NEW.PREC_ART, SYSDATE, USER, 'Actualizar');
end;
/
ALTER TRIGGER  "REGISTROARTICULOS" ENABLE;CREATE OR REPLACE TRIGGER  "REGISTROPEDIDOS" 
before
update on "PEDIDO"
for each row
begin
insert into REGISTROPEDIDOS(ID_PED_ANTIGUO, ID_CLI_PED_ANTIGUO, FEC_PED_ANTIGUO, VAL_PED_ANTIGUO, 
ID_PED_NUEVO, ID_CLI_PED_NUEVO, FEC_PED_NUEVO, VAL_PED_NUEVO, FECHAMODIFICACION, USUARIO, ACCION)
VALUES
(:OLD.ID_PED, :OLD.ID_CLI_PED, :OLD.FEC_PED, :OLD.VAL_PED, :NEW.ID_PED, :NEW.ID_CLI_PED, :NEW.FEC_PED, 
:NEW.VAL_PED, SYSDATE, USER, 'Actualizar');
end;
/
ALTER TRIGGER  "REGISTROPEDIDOS" ENABLE;